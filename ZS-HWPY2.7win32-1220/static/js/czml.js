var names = [];
var trackNumber = [];
function loaddata(url,name) {
    $.get("/"+url,function(data) {
        names =  name ;
        // 根据返回的数据拼接czml
        for (var i = 0; i < data.length; i++) {
            // console.log(data[i])
            var czml = [{
                "id": "document",
                "name": names[i],
                "version": "1.0"
            }, {
                "id": names[i],
                "name": names[i],
                "polyline": {
                    "positions": {
                        "cartographicDegrees": data[i]
                    },
                    "material": {
                        "solidColor": {
                            "color": {
                                "rgba": [255, 0, 0, 160]
                            }
                        }
                    },
                    "width": 1,
                }
            }];
            // console.log(5);
            var dataSourcePromise = Cesium.CzmlDataSource.load(czml);
            viewer.dataSources.add(dataSourcePromise);
            trackNumber.push(names[i]);
        }
    })
}
function showData() {
loaddata("getdata1",[11401, 11402, 11403, 11404, 11405, 11406, 11407, 11408, 11409, 114210, 114211, 114312, 114313, 114314, 114515, 114516, 114517, 114518, 114519, 114520, 114521, 114522, 114523, 114824, 20314170, 20314171, 20314172, 20314173, 114825, 114826, 114827, 114828, 114829, 114830, 114831, 114832, 114833, 20314174, 20314175, 20314176, 20314177, 20314178, 114834, 114835, 114836, 114837, 114838, 20334185, 20334186, 20334187, 20544251, 20544252, 20614298, 20614299, 20614300, 20074102, 20074103, 20074104, 20074105, 20074106, 20074107, 20074108, 20074109, 20074110, 20074111, 20074112, 20074113, 20074114, 20074115, 20094116, 20094117, 114839, 114840, 114841, 114942, 114943, 114944, 20314179, 20314180, 20334188, 20334189, 20334190, 20334191, 114945, 2000446, 2000447, 2000448, 2001449, 2001450, 2001451, 2001452, 20094118, 20094119, 20094120, 20094121, 20334192, 20334193, 20314181, 20314182, 20314183, 20314184, 20454213, 20454214, 20094122, 20094123, 20094124, 20094125, 2001453, 2001454, 2001455, 2001456, 2001457, 20454215, 20454216, 20454217, 20454218, 20454219, 20334194, 20334195, 20334196, 20334197, 20334198, 20334199, 20464220, 20464221, 20464222, 20464223, 20484224, 20484225, 20484226, 20484227, 20484228, 20484229, 20484230, 20484231, 20524232, 20094126, 20094127, 20094128, 20094129, 20094130, 2001458, 2001459, 2001460, 2001461, 2001462, 20094131, 20094132, 20254133, 20254134, 20434200, 20434201, 20434202, 20454203, 20454204, 20454205, 20454206, 20454207, 20524233, 20524234, 20524235, 20454208, 20454209, 20454210, 20454211, 2001463, 2001464, 2001465, 2001466, 2001467, 20254135, 20254136, 20254137, 20254138, 20254139, 20254140, 20254141, 20254142, 20544253, 20544254, 20544255, 20544256, 20544257, 20544258, 20524236, 20524237, 20524238, 20454212, 20604284, 20604285, 20604286, 20604287, 20524239, 20524240, 20524241, 20524242, 20254143, 20254144, 20254145, 20254146, 20254147, 20564259, 20564260, 20564261, 20254148, 20254149, 20274150, 20274151, 20274152, 20274153, 20274154, 20274155, 20284156, 20284157, 20284158, 20294159, 20294160, 20294161, 20294162, 20294163, 20294164, 20294165, 20294166, 20294167, 20294168, 20294169, 20614288, 20614289, 20524243, 20524244, 20544245, 20544246, 20614290, 20614291, 20614292, 20614293, 20614294, 20564262, 20564263, 20564264, 20564265, 20564266, 20564267, 20564268, 20564269, 20544247, 20544248, 20544249, 20544250, 20614295, 20614296, 20614297, 20564270, 20564271, 20564272, 20564273, 20604274, 20604275, 20604276, 20604277, 20604278, 20604279, 20604280, 20604281, 20604282, 20604283, 2002468, 2002469, 2002470, 2002471, 2002472, 2002473, 2002474, 2002475, 2002476, 2002477, 2002478, 2003479, 2003480, 2003481, 2003482, 2003483, 2003484, 2003485, 2006486, 2006487, 2006488, 2006489, 2006490, 2006491, 2006492, 2006493, 2006494, 2006495, 2006496, 2006497, 2006498, 2006499, 20064100, 20064101]);
setTimeout("loaddata(\"getdata2\",[21544542, 21544543, 21544544, 21544545, 21544546, 21544547, 21544548, 21544549, 21544550, 21544551, 21544552, 21554553, 21554554, 21554555, 21554556, 21554557, 21554558, 21554559, 21554560, 21554561, 21554562, 21554563, 20844344, 20844345, 20844346, 20844347, 20614301, 20614302, 20614303, 20624304, 20624305, 20624306, 20624307, 20644308, 20644309, 20644310, 20644311, 20644312, 20704313, 20704314, 20704315, 20704316, 20704317, 20704318, 20744319, 20744320, 20744321, 20744322, 20744323, 20744324, 20744325, 20944373, 20944374, 20944375, 20944376, 20945377, 20945378, 20945379, 20945380, 20945381, 20945382, 20945383, 20945384, 20744326, 20744327, 20744328, 20804329, 20804330, 20804331, 20804332, 20804333, 20804334, 20804335, 20804336, 20804337, 20804338, 20804339, 20844340, 20844341, 20844342, 20844343, 20844348, 20844349, 20844350, 20844351, 20924352, 20924353, 20924354, 20924355, 20924356, 20924357, 20924358, 20924359, 20924360, 20924361, 20934362, 20934363, 20934364, 20934365, 20934366, 20934367, 20934368, 20944369, 20944370, 20944371, 20944372, 21074455, 21074456, 21074457, 21094458, 21094459, 21094460, 21094461, 21164462, 21164463, 21164464, 20945385, 20945386, 20945387, 20945388, 20945389, 21164465, 21374514, 21374515, 21374516, 21374517, 21374518, 21374519, 21484520, 21484521, 21484522, 21484523, 21164466, 21164467, 21164468, 21164469, 21164470, 21164471, 21164472, 20945390, 20945391, 20945392, 20945393, 20945394, 20946395, 20946396, 20946397, 20984398, 21044399, 21044400, 21044401, 21044402, 21044403, 21044404, 21044405, 21044406, 21054430, 21064431, 21064432, 21064433, 21064434, 21064435, 21064436, 21064437, 21064438, 21064439, 21064440, 21064441, 21554564, 21554565, 21554566, 21164473, 21164474, 21164475, 21164476, 21164477, 21164478, 21554567, 21554568, 21554569, 21554570, 21554571, 21554572, 21564573, 21564574, 21564575, 21564576, 21184479, 21184480, 21184481, 21184482, 21184483, 21184484, 21184485, 21184486, 21204487, 21204488, 21204489, 21564577, 21564578, 21564579, 21564580, 21204490, 21204491, 21204492, 21204493, 21204494, 21204495, 21204496, 21064442, 21064443, 21064444, 21064445, 21044407, 21044408, 21564581, 21564582, 21564583, 21564584, 21204497, 21204498, 21244499, 21244500, 21244501, 21044409, 21044410, 21044411, 21044412, 21044413, 21564589, 21564590, 21564591, 21564592, 21574593, 21574594, 21574595, 21584596, 21584597, 21584598, 21244502, 21244503, 21244504, 21244505, 21244506, 21044414, 21044415, 21044416, 21044417, 21054418, 21054419, 21584599, 21584600, 21244507, 21294508, 21294509, 21294510, 21294511, 21294512, 21294513, 21484524, 21054420, 21054421, 21054422, 21054423, 21484525, 21484526, 21484527, 21484528, 21484529, 21054424, 21054425, 21054426, 21054427, 21054428, 21484530, 21564585, 21564586, 21564587, 21054429, 21064446, 21064447, 21564588, 21064448, 21064449, 21064450, 21074451, 21074452, 21074453, 21074454, 21484531, 21484532, 21484533, 21484534, 21484535, 21484536, 21484537, 21504538, 21504539, 21504540, 21544541])\n","2000");
setTimeout("loaddata(\"getdata3\",[21594608, 21594609, 21594610, 21594611, 21594612, 21594613, 21594614, 21594615, 21594616, 21594617, 21594618, 21594619, 21594620, 21594621, 21594622, 21594623, 21604624, 21604625, 21604626, 21604627, 21604628, 21634629, 21634630, 21634631, 21634632, 21634633, 21634634, 21634635, 21634636, 21634637, 21634638, 21634639, 21634640, 21634641, 21634642, 21634643, 21634644, 21634645, 21634646, 21634647, 21634648, 21634649, 21634650, 21634651, 22374888, 22374889, 22374890, 22374891, 22374892, 22374893, 22374894, 22374895, 22374896, 22374897, 22374898, 22374899, 22374900, 21664673, 21664674, 21664675, 21634652, 21634653, 21634654, 21634655, 21634656, 21634657, 21648658, 21648659, 21648660, 21648661, 21648662, 21664663, 21664664, 21664668, 21664669, 21664670, 21664671, 21664672, 21745706, 21745707, 21746708, 21746709, 21748710, 21748711, 21748712, 21749713, 21749714, 21749715, 21749716, 21749717, 21754718, 21754719, 21754720, 21754721, 21764722, 21764723, 21784724, 21784725, 21784726, 21784727, 21784728, 21784729, 21843730, 21843731, 21854732, 21854733, 21854734, 21854735, 21854736, 21854737, 21854738, 21874739, 21874740, 21874741, 21874742, 21874743, 21874744, 21874745, 21874746, 21874747, 21874748, 21874749, 21874750, 21874751, 21874752, 21874753, 21884754, 21884755, 21884756, 21884757, 21884758, 21884759, 21884760, 21664676, 21674677, 21674678, 21674679, 21674680, 21674681, 21694682, 21694683, 21884761, 21884762, 21884763, 21904764, 21904765, 21904766, 21904767, 21954768, 21954769, 21954770, 21954771, 21954772, 21954773, 21954774, 21954775, 21954776, 21954777, 21954778, 21974779, 21974780, 21974781, 21974782, 21974783, 21974784, 21974785, 21974786, 21974787, 22024808, 22024809, 22064810, 22064811, 22064812, 22064813, 22064814, 22064815, 22064816, 22064817, 22064818, 22064819, 22064820, 22064821, 21974788, 21974789, 21974790, 21974791, 21974792, 21974793, 21694684, 21694685, 21724686, 21724687, 21740688, 21741689, 21741690, 21741691, 21741692, 21741693, 21741694, 21742695, 21742696, 21742697, 21742698, 21744699, 21744700, 21744701, 21745702, 21745703, 21745704, 21745705, 21664665, 21664666, 21664667, 21584601, 21584602, 21584603, 21584604, 21594605, 21594606, 21594607, 21974794, 21974795, 21974796, 21974797, 21974798, 21974799, 21974800, 22014801, 22024802, 22024803, 22024804, 22024805, 22024806, 22024807, 22064822, 22084823, 22084824, 22084825, 22094826, 22094827, 22094828, 22094829, 22094830, 22094831, 22094832, 22094833, 22094834, 22094835, 22104836, 22104837, 22104838, 22104839, 22124840, 22124841, 22124842, 22124843, 22124844, 22124845, 22124846, 22134847, 22134848, 22134849, 22144850, 22144851, 22144852, 22144853, 22144854, 22144855, 22144856, 22144857, 22144858, 22144859, 22154860, 22154861, 22154862, 22164863, 22164864, 22214865, 22214866, 22214867, 22264868, 22264869, 22264870, 22274871, 22274872, 22274873, 22304874, 22304875, 22304876, 22304877, 22304878, 22304879, 22304880, 22304881, 22344882, 22344883, 22344884, 22344885, 22374886, 22374887])\n","3000");
setTimeout("loaddata(\"getdata4\",[22524920, 22524921, 226741008, 226741009, 226841010, 226841011, 226841012, 227041013, 227041014, 227141015, 227141016, 228741101, 228741102, 22594955, 22624956, 22624957, 229541115, 22524926, 22524927, 22534928, 22534929, 22534930, 22534931, 228741103, 229341104, 229341105, 229341106, 229541107, 229541108, 22624960, 22624961, 22624962, 22624963, 22534932, 22544933, 22544934, 22544935, 22544936, 22564937, 22564938, 22564939, 22594940, 22374901, 22374902, 229541116, 229541117, 229541118, 229541119, 229541120, 229741121, 22624964, 22624965, 22624966, 22624967, 229541109, 229541110, 229541111, 229541112, 229741122, 229741123, 229741124, 229741125, 229741126, 229741127, 22394903, 22394904, 22394905, 22394906, 229541113, 229541114, 227141026, 22624968, 22634969, 22634970, 22634971, 22634972, 22634973, 22634974, 22634975, 22644976, 22644977, 22394907, 22394908, 22394909, 22394910, 22524911, 229741128, 229741129, 229741130, 229741131, 22644978, 22644979, 22644980, 22644981, 227441027, 227641028, 227641029, 227641030, 227641031, 227741032, 227741033, 227841034, 227841035, 227841036, 227841037, 227841038, 227841039, 227841040, 227841041, 227841042, 227841043, 227941044, 227941045, 228241046, 229741132, 229741133, 229741134, 229741135, 229741136, 229741137, 22524912, 22524913, 22524914, 228241063, 228241064, 228241065, 228241047, 228241048, 228241049, 228241050, 228241051, 22644982, 22644983, 22644984, 22644985, 22644986, 228241066, 228341067, 228341068, 228441069, 228441070, 228441071, 228441072, 228441073, 228441074, 228641075, 229741138, 229741139, 229741140, 22644987, 22644988, 22644989, 22644990, 22644991, 228241052, 228241053, 228241054, 228241055, 228241056, 228241057, 228241058, 229741141, 229741142, 229741143, 229741144, 228641076, 228641077, 228641078, 228641079, 228241059, 228241060, 228241061, 228241062, 22644992, 22644993, 22664994, 22664995, 22664996, 22664997, 22664998, 22664999, 226641000, 226741001, 226741002, 226741003, 226741004, 226741005, 226741006, 226741007, 228641080, 228641081, 228641082, 228641083, 228641084, 229741145, 229741146, 229741147, 229741148, 229741149, 229841150, 229941151, 238141169, 238341170, 238341171, 238641172, 238641173, 234041152, 234041153, 234041154, 234041155, 234041156, 234041157, 234541158, 234541159, 234541160, 234541161, 234541162, 234541163, 238141164, 238141165, 238141166, 238141167, 238141168, 228641085, 228641086, 228641087, 228641088, 238641174, 238641175, 238641176, 240041191, 240041192, 228641089, 228641090, 228741091, 240041193, 240041194, 240041195, 240041196, 228741092, 228741093, 228741094, 240041197, 240041198, 240041199, 240241200, 228741095, 228741096, 228741097, 238641177, 238641178, 238641179, 238641180, 238641181, 228741098, 228741099, 228741100, 238641182, 238641183, 238641184, 238641185, 239041186, 239041187, 239041188, 239041189, 240041190, 22524915, 22524916, 22524917, 22524918, 22524919, 22594941, 22594942, 22594943, 22594944, 22594945, 22594946, 22594947, 22594948, 22594949, 22594950, 22594951, 227141017, 227141018, 227141019, 227141020, 227141021, 227141022, 227141023, 22524922, 22524923, 22524924, 22524925, 227141024, 227141025, 22594952, 22594953, 22594954, 22624958, 22624959])\n","4000");
    console.log('加载数据中');
}

function removeData() {
    for (var i = 0; i < gridPrimitives[0].length; ++i) {
        scene.primitives.remove(gridPrimitives[0][i]);
        scene.primitives.remove(gridPrimitives[1][i]);
    }
    for (var j = 0; j < names.length; ++j) {
        // 显示所有轨迹
        viewer.dataSources.getByName(names[j])[0].show = true;
    }
}

// 选中轨迹高亮，并清除上一条高亮
var temp = new Array();
window.Hightlightline = function (nameid) {
    setTimeout("for(var i = 0;i< viewer.dataSources._dataSources.length; i++){\n" +
        "        viewer.dataSources.getByName(viewer.dataSources._dataSources[i]._name)[0].show=false\n" +
        "    }",500);
    var exists = temp.indexOf(nameid);
    if (exists <= -1 && temp.length === 0) {
        viewer.dataSources.getByName(nameid)[0]._entityCollection._entities._array[0].polyline.material = Cesium.Color.YELLOW;
        viewer.dataSources.getByName(nameid)[0]._entityCollection._entities._array[0].polyline.width = 3;
        temp.push(nameid);
        // 添加线nameID到数组，
        // console.log(temp)
    }else if(exists <= -1 && temp.length !== 0){
        viewer.dataSources.getByName(temp[0])[0]._entityCollection._entities._array[0].polyline.material = Cesium.Color.RED;
        viewer.dataSources.getByName(temp[0])[0]._entityCollection._entities._array[0].polyline.width = 1;
        viewer.dataSources.getByName(nameid)[0]._entityCollection._entities._array[0].polyline.material = Cesium.Color.YELLOW;
        viewer.dataSources.getByName(nameid)[0]._entityCollection._entities._array[0].polyline.width = 3;
        temp=[];
        temp.push(nameid);
    }
};

// 轨迹显示或隐藏
window.hightlightOrDisappearLine = function () {
    for (var i = 0; i < trackNumber.length; ++i) {
        // 隐藏所有轨迹
        viewer.dataSources.getByName(trackNumber[i])[0].show = false;

        // 选中轨迹高亮，其余轨迹隐藏
        // if (names[i] !== nameid) {
        //     viewer.dataSources.getByName(names[i])[0].show = false;
        // }
        // else {
        //     viewer.dataSources.getByName(nameid)[0]._entityCollection._entities._array[0].polyline.material = Cesium.Color.DEEPSKYBLUE;
        // }
    }
    console.log(trackNumber.length);
};

var similarTrackIndex = [];
viewer.screenSpaceEventHandler.setInputAction(function onLeftClick(movement) {
    var pickedFeature = viewer.scene.pick(movement.position);
    if (typeof (pickedFeature) != "undefined")   //鼠标是否点到线上
    {
        var name_id = pickedFeature.id._id;  //获取每条线的nameID,number类型
        hightlightOrDisappearLine();
        var clickCode=JSON.stringify(name_id);//string类型
        console.log(clickCode);

        $.ajax({
            url:'/trackCodes/',
            type:"POST",
            data:clickCode,
            // contentType: 'application/json; charset=UTF-8',
            dataType:"json",
            success:function(codes_jsn){//data_jsn为后端返回的结果
                codes_jsn = [["11401", "100%", "0", "12100323011332020000012", "12100323011332020000030", "12100323011332020000032",
    "12100323011332020000210", "12100323011332020000212", "12100323011332020000230", "12100323011332020000232", "12100323011332020002010", "12100323011332020002012",
    "12100323011332020002030", "12100323011332020002032", "12100323011332020002210", "12100323011332020002212", "12100323011332020002230", "12100323011332020002232",
    "12100323011332020020010", "12100323011332020020012", "12100323011332020020030", "12100323011332020020032", "12100323011332020020210", "12100323011332020020212",
    "12100323011332020020230", "12100323011332020020232", "12100323011332020022010", "12100323011332020022012", "12100323011332020022030", "12100323011332020022032",
    "12100323011332020022210", "12100323011332020022212", "12100323011332020022230", "12100323011332020022232", "12100323011332020200010", "12100323011332020200012",
    "12100323011332020200030", "12100323011332020200032", "12100323011332020200210", "12100323011332020200212", "12100323011332020200230", "12100323011332020200232",
    "12100323011332020202010", "12100323011332020202012", "12100323011332020202030", "12100323011332020202032", "12100323011332020202210", "12100323011332020202212",
    "12100323011332020202230", "12100323011332020202232", "12100323011332020220011", "12100323011332020220013", "12100323011332020220031", "12100323011332020220033",
    "12100323011332020220211", "12100323011332020220213", "12100323011332020220231", "12100323011332020220233", "12100323011332020222100", "12100323011332020222102",
    "12100323011332020222120", "12100323011332020222122", "12100323011332020222300", "12100323011332020222302", "12100323011332020222320", "12100323011332020222322",
    "12100323011332022000011", "12100323011332022000013", "12100323011332022000031", "12100323011332022000030", "12100323011332022000021", "12100323011332022000020",
    "12100323011323133111133", "12100323011323133111132", "12100323011323133111123", "12100323011323133111122", "12100323011323133111033", "12100323011323133111032",
    "12100323011323133111023", "12100323011323133111022", "12100323011323133110133", "12100323011323133110132", "12100323011323133110123", "12100323011323133110122",
    "12100323011323133110033", "12100323011323133110032", "12100323011323133110023", "12100323011323133110022", "12100323011323133101133", "12100323011323133101132",
    "12100323011323133101123", "12100323011323133101122", "12100323011323133101033", "12100323011323133101032", "12100323011323133101023", "12100323011323133101022",
    "12100323011323133100133", "12100323011323133100132", "12100323011323133100123", "12100323011323133100122", "12100323011323133100033", "12100323011323133100032",
    "12100323011323133100201", "12100323011323133100200", "12100323011323133011311", "12100323011323133011310", "12100323011323133011301", "12100323011323133011300",
    "12100323011323133011213", "12100323011323133011212", "12100323011323133011203", "12100323011323133011202", "12100323011323133010331", "12100323011323133010330",
    "12100323011323133010321", "12100323011323133010320", "12100323011323133010233", "12100323011323133010232", "12100323011323133010223", "12100323011323133010220",
    "12100323011323133001331", "12100323011323133001330", "12100323011323133001321", "12100323011323133001302", "12100323011323133001213", "12100323011323133001212",
    "12100323011323133001201", "12100323011323133001200", "12100323011323133000311", "12100323011323133000310", "12100323011323133000301", "12100323011323133000300",
    "12100323011323133000211", "12100323011323133000210", "12100323011323133000201", "12100323011323133000200", "12100323011323132111313", "12100323011323132111312",
    "12100323011323132111330", "12100323011323132111332", "12100323011323132113110", "12100323011323132113112", "12100323011323132113130", "12100323011323132113123",
    "12100323011323132113301", "12100323011323132113303", "12100323011323132113321", "12100323011323132113323", "12100323011323132131101", "12100323011323132131103",
    "12100323011323132131121", "12100323011323132131132", "12100323011323132131310", "12100323011323132131312", "12100323011323132131330", "12100323011323132131332",
    "12100323011323132133110", "12100323011323132133113", "12100323011323132133131", "12100323011323132133133", "12100323011323132133311", "12100323011323132133313",
    "12100323011323132133331", "12100323011323132133333", "12100323011323133200000"],["11402", "95%", "1", "12100323011323133200002", "12100323011323133200020", "12100323011323133200022",
    "12100323011323133200200", "12100323011323133200202", "12100323011323133200220", "12100323011323133200222", "12100323011323133202000", "12100323011323133202002",
    "12100323011323132313131", "12100323011323132313133", "12100323011323132313311", "12100323011323132313313", "12100323011323132313331", "12100323011323132313333",
    "12100323011323132331111", "12100323011323132331113", "12100323011323132331131", "12100323011323132331133", "12100323011323132331310", "12100323011323132331312",
    "12100323011323132331330", "12100323011323132331332", "12100323011323132333110", "12100323011323132333112", "12100323011323132333131", "12100323011323132333133",
    "12100323011323132333311", "12100323011323132333313", "12100323011323132333331", "12100323011323133222222", "12100323011323311000000", "12100323011323311000002",
    "12100323011323311000020", "12100323011323311000022", "12100323011323311000201", "12100323011323311000203", "12100323011323311000221", "12100323011323311000223",
    "12100323011323311002001", "12100323011323311002003", "12100323011323311002021", "12100323011323311002022", "12100323011323311002200", "12100323011323311002202",
    "12100323011323311002220", "12100323011323311002222", "12100323011323311020000", "12100323011323311020002", "12100323011323311020020", "12100323011323311020022",
    "12100323011323311020200"],["11403", "90%", "2", "1210032301133202000001", "1210032301133202000003", "1210032301133202000004"],["11404", "80%", "3", "1210032301133202000021", "1210032301133202000022",
                    "1210032301133202000023", "1210032301133202000020"]];
                $("#xiangsiDiv").css({"display":"block"});
                //将点击选择的目标轨迹属性传到前端工具框内
                $("#Target-trajectory").text(clickCode);//相似场景中目标轨迹id
                $("#Similar-trajectories1").text(codes_jsn[1][0]);$("#Track-similarity1").text(codes_jsn[1][1]);//相似场景中第一条相似轨迹id，相似度
                similarTrackIndex.push(codes_jsn[1][2]);
                $("#Similar-trajectories2").text(codes_jsn[2][0]);$("#Track-similarity2").text(codes_jsn[2][1]);//相似场景中第二条相似轨迹id，相似度
                similarTrackIndex.push(codes_jsn[2][2]);
                $("#Similar-trajectories3").text(codes_jsn[3][0]);$("#Track-similarity3").text(codes_jsn[3][1]);//相似场景中第三条相似轨迹id，相似度
                similarTrackIndex.push(codes_jsn[3][2]);

                // gridsColor包含两个一维数组，第一个数组用来确定目标轨迹的线框和面片颜色及透明度，第二个数组用来确定相似轨迹的线框和面片颜色及透明度
			    var gridsColor = [[Cesium.Color.GREENYELLOW, Cesium.Color.CYAN.withAlpha(0.5)], [Cesium.Color.YELLOW, Cesium.Color.ORANGE.withAlpha(0.5)]]
				drawGridsFromCodes(codes_jsn, gridsColor);
            }
        });
    }
}, Cesium.ScreenSpaceEventType.LEFT_CLICK);

var showPrimitives = [];

$("#Similar-trajectories1").click(function() {
    //点击的相似轨迹出现，前一条相似轨迹隐藏
    if (showPrimitives.length > 0) {
        var primitives = showPrimitives.pop();
        primitives.show = false;
        primitives = showPrimitives.pop();
        primitives.show = false;
    }
    gridPrimitives[0][similarTrackIndex[0]].show = true;
    gridPrimitives[1][similarTrackIndex[0]].show = true;
    showPrimitives.push(gridPrimitives[0][similarTrackIndex[0]]);
    showPrimitives.push(gridPrimitives[1][similarTrackIndex[0]]);
});
$("#Similar-trajectories2").click(function() {
    if (showPrimitives.length > 0) {
        var primitives = showPrimitives.pop();
        primitives.show = false;
        primitives = showPrimitives.pop();
        primitives.show = false;
    }
    gridPrimitives[0][similarTrackIndex[1]].show = true;
    gridPrimitives[1][similarTrackIndex[1]].show = true;
    showPrimitives.push(gridPrimitives[0][similarTrackIndex[1]]);
    showPrimitives.push(gridPrimitives[1][similarTrackIndex[1]]);
});
$("#Similar-trajectories3").click(function() {
    if (showPrimitives.length > 0) {
        var primitives = showPrimitives.pop();
        primitives.show = false;
        primitives = showPrimitives.pop();
        primitives.show = false;
    }
    gridPrimitives[0][similarTrackIndex[2]].show = true;
    gridPrimitives[1][similarTrackIndex[2]].show = true;
    showPrimitives.push(gridPrimitives[0][similarTrackIndex[2]]);
    showPrimitives.push(gridPrimitives[1][similarTrackIndex[2]]);
});